/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import java.awt.Container;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLSyntaxErrorException;
import java.sql.Statement;
import java.util.*;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author ACER
 */
public class Form_3 extends javax.swing.JPanel {

    private Map<String, Set<String>> nonEditableColumns = new HashMap<>();
    private Form_Home home;
    ResultSet rs = null;
    Connection con = null;
    Statement stmt = null;
    /**
     * Creates new form Form_1
     */
    public Form_3() {
        initComponents();
        fillTableName();
        home = new Form_Home();
        initializeNonEditableColumns();
        setupCheckboxListeners();
        tblAllTables.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblAllTablesMouseClicked(evt); // Call the separate method
        }
    });
    }

    private void initializeNonEditableColumns() {
    nonEditableColumns = new HashMap<>();
    
    // Customer table non-editable columns
    nonEditableColumns.put("Customer", new HashSet<>(Arrays.asList(
        "Customer_ID",
        "Customer_Name", 
        "Customer_Add", 
        "Customer_Tel", 
        "Customer_Email", 
        "Customer_Gender", 
        "Customer_Age"
    )));
    
    // TVproducts and services table non-editable columns
    nonEditableColumns.put("TVproducts and services", new HashSet<>(Arrays.asList(
        "TVproduct_ID",
        "TVproduct_Name",
        "TVproduct_Type",
        "TVproduct_Quantity",
        "TVproduct_Price",
        "Customer_ID"
    )));
    
    // User Login table non-editable columns (if applicable)
    nonEditableColumns.put("admin", new HashSet<>(Arrays.asList(
        "user_id", 
        "password"
    )));
    
     nonEditableColumns.put("mainadmin", new HashSet<>(Arrays.asList(
        "username", 
        "passwords"
    )));
}
    
    private boolean isColumnNonEditable(String tableName, String columnName) {
    if (nonEditableColumns.containsKey(tableName)) {
        return nonEditableColumns.get(tableName).contains(columnName);
    }
    return false;
}

    private void resetInputFields() {
    txtC1.setText("");
    cboType1.setSelectedIndex(0);
    chkN1.setSelected(false);
    chkP1.setSelected(false);
    chkF1.setSelected(false);
}

    private boolean validateInput(String columnName, String dataType) {
    if (columnName.isEmpty() || dataType.equals("Select")) {
        JOptionPane.showMessageDialog(
            this, 
            "Please enter a column name and select a valid data type", 
            "Invalid Input", 
            JOptionPane.WARNING_MESSAGE
        );
        return false;
    }
    return true;
}

    private Connection getDatabaseConnection() throws SQLException {
    return DriverManager.getConnection(
        "jdbc:mysql://localhost:3306/repairdb?useSSL=false", 
        "root", 
        "1111"
    );
}
    
    private void fillTableName()
    {
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/repairdb?useSSL=false", "root", "1111");
            DatabaseMetaData dbmd = con.getMetaData();
            String[] types = {"TABLE"};//<-- S
            rs = dbmd.getTables("repairdb",null,"%", types); //adding table info in result set
            while(rs.next())
            {
                cboSearch.addItem(rs.getString("TABLE_NAME"));//adding resultset's table name in combobox
            }
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllTables = new javax.swing.JTable();
        lblC1 = new javax.swing.JLabel();
        txtC1 = new javax.swing.JTextField();
        cboType1 = new javax.swing.JComboBox();
        chkN1 = new javax.swing.JCheckBox();
        chkP1 = new javax.swing.JCheckBox();
        chkF1 = new javax.swing.JCheckBox();
        btnBack = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();
        cboSearch = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnADD = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 102));

        tblAllTables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblAllTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAllTablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAllTables);

        lblC1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        lblC1.setForeground(new java.awt.Color(255, 255, 255));
        lblC1.setText("Column ");

        txtC1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N

        cboType1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        cboType1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "int", "float", "double", "nchar(5)", "varchar(5)", "varchar(10)", "varchar(15)", "varchar(20)" }));

        chkN1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        chkN1.setText("Null");

        chkP1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        chkP1.setText("Primary Key");
        chkP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkP1ActionPerformed(evt);
            }
        });

        chkF1.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        chkF1.setText("Foreign Key");

        btnBack.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDrop.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        btnDrop.setText("DROP");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        cboSearch.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        cboSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT" }));
        cboSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSearchItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SELECT TABLES");

        jLabel3.setFont(new java.awt.Font("Century", 0, 28)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("DATABASE TABLES MODIFICATION");

        jLabel4.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("DATA TYPE");

        jLabel5.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("KEYS");

        btnADD.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnADD.setText("ADD");
        btnADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnADDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel2)
                        .addGap(61, 61, 61)
                        .addComponent(cboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 983, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtC1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblC1))
                                .addGap(138, 138, 138)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(cboType1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(chkN1)
                                        .addGap(82, 82, 82)
                                        .addComponent(chkP1)))
                                .addGap(102, 102, 102)
                                .addComponent(chkF1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDrop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate)
                            .addComponent(btnADD, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(518, 518, 518)
                        .addComponent(jLabel3)))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lblC1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnADD)
                            .addGap(27, 27, 27)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkF1)
                    .addComponent(chkN1)
                    .addComponent(chkP1))
                .addGap(9, 9, 9)
                .addComponent(btnDrop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSearchItemStateChanged
       if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        displayData();
    }
    }//GEN-LAST:event_cboSearchItemStateChanged

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        try {
        // Get parent container
        Container parent = this.getParent();
        
        // Remove current panel
        parent.remove(this);
        
        // Add back the main panel (Form_Home)
        Form_Home mainPanel = new Form_Home();
        parent.add(mainPanel);
        
        // Refresh the container
        parent.revalidate();
        parent.repaint();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error returning to main panel: " + e.getMessage(), 
            "Navigation Error", 
            JOptionPane.ERROR_MESSAGE
        );
    }
    }//GEN-LAST:event_btnBackActionPerformed

    private void tblAllTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAllTablesMouseClicked
         int row = tblAllTables.getSelectedRow();
    
    // Check if a valid row is selected
    if (row >= 0 && row < tblAllTables.getRowCount()) {
        try {
            // Get column details from the selected row
            String columnName = tblAllTables.getValueAt(row, 0).toString();
            String dataType = tblAllTables.getValueAt(row, 1).toString();
            
            // Set values in UI components
            txtC1.setText(columnName);
            
            // Set data type in combo box
            setDataTypeInComboBox(dataType);
            
            // Reset checkboxes
            chkN1.setSelected(false);
            chkP1.setSelected(false);
            chkF1.setSelected(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error selecting row: " + e.getMessage(), 
                "Selection Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    } else {
        // Clear fields if no valid row is selected
        txtC1.setText("");
        cboType1.setSelectedIndex(0);
        chkN1.setSelected(false);
        chkP1.setSelected(false);
        chkF1.setSelected(false);
    }
    }//GEN-LAST:event_tblAllTablesMouseClicked

    private void setDataTypeInComboBox(String dataType) {
    // Map database types to combo box items
    switch (dataType.toLowerCase()) {
        case "int":
            cboType1.setSelectedItem("int");
            break;
        case "float":
            cboType1.setSelectedItem("float");
            break;
        case "double":
            cboType1.setSelectedItem("double");
            break;
        case "varchar":
            // You might want to set the appropriate varchar size
            cboType1.setSelectedItem("varchar(10)");
            break;
        case "varchar(50)":
            // You might want to set the appropriate varchar size
            cboType1.setSelectedItem("varchar(50)");
            break;
        case "char":
            cboType1.setSelectedItem("nchar(5)");
            break;
        default:
            cboType1.setSelectedItem("Select");
    }
}

    
    private void btnADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnADDActionPerformed
       Connection con = null;
    PreparedStatement pstmt = null;
    
    try {
        // Gather input
        String tableName = cboSearch.getSelectedItem().toString();
        String columnName = txtC1.getText().trim();
        String dataType = cboType1.getSelectedItem().toString();
        
        // Validate input
        if (!validateInput(columnName, dataType)) return;
        
        // Check for restricted column names
        if (isColumnNonEditable(tableName, columnName)) {
            JOptionPane.showMessageDialog(
                this, 
                "Cannot add a column with a restricted name!", 
                "Restricted Column", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        
        // Validate Primary Key and Null constraints
        if (chkP1.isSelected() && chkN1.isSelected()) {
            JOptionPane.showMessageDialog(
                this, 
                "A Primary Key column cannot be Null", 
                "Constraint Violation", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        
        // Establish database connection
        con = getDatabaseConnection();
        
        // Construct ALTER TABLE statement
        StringBuilder sqlBuilder = new StringBuilder(
            "ALTER TABLE " + tableName + " ADD COLUMN " + columnName + " " + dataType
        );
        
        // Add NULL/NOT NULL constraint
        if (chkP1.isSelected()) {
            // Primary key is always NOT NULL
            sqlBuilder.append(" NOT NULL PRIMARY KEY");
        } else {
            // Use the selected null/not null option
            sqlBuilder.append(chkN1.isSelected() ? " NULL" : " NOT NULL");
        }
        
        // Prepare and execute statement
        pstmt = con.prepareStatement(sqlBuilder.toString());
        pstmt.execute();
        
        // Success message and refresh
        JOptionPane.showMessageDialog(
            this, 
            "Column added successfully", 
            "Success", 
            JOptionPane.INFORMATION_MESSAGE
        );
        displayData();
        resetInputFields();
        
    } catch (SQLSyntaxErrorException e) {
        // Handle SQL syntax errors
        JOptionPane.showMessageDialog(
            this, 
            "Invalid SQL syntax: " + e.getMessage(), 
            "SQL Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } catch (SQLException e) {
        // Handle database-specific errors
        JOptionPane.showMessageDialog(
            this, 
            "Database error: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } catch (Exception e) {
        // Catch any other unexpected exceptions
        JOptionPane.showMessageDialog(
            this, 
            "Unexpected error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } finally {
        // Close resources
        try {
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                this, 
                "Error closing database resources: " + ex.getMessage(), 
                "Resource Close Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    }//GEN-LAST:event_btnADDActionPerformed

    private void setupCheckboxListeners() {
    // Prevent selecting both Primary Key and Null simultaneously
    chkP1.addActionListener(e -> {
        if (chkP1.isSelected()) {
            chkN1.setSelected(false);
            chkN1.setEnabled(false);
        } else {
            chkN1.setEnabled(true);
        }
    });
    
    chkN1.addActionListener(e -> {
        if (chkN1.isSelected()) {
            chkP1.setSelected(false);
            chkP1.setEnabled(false);
        } else {
            chkP1.setEnabled(true);
        }
    });
}
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        Connection con = null;
    PreparedStatement pstmt = null;
    
    try {
        // Validate row selection
        int selectedRow = tblAllTables.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(
                this, 
                "Please select a column to update", 
                "No Selection", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        
        // Get table and column details
        String tableName = cboSearch.getSelectedItem().toString();
        String oldColumnName = tblAllTables.getValueAt(selectedRow, 0).toString();
        
        // Check if column is allowed to be edited
        if (isColumnNonEditable(tableName, oldColumnName)) {
            JOptionPane.showMessageDialog(
                this, 
                "This column cannot be modified!", 
                "Restricted Column", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        
        // Validate new input
        String newColumnName = txtC1.getText().trim();
        String dataType = cboType1.getSelectedItem().toString();
        
        if (!validateInput(newColumnName, dataType)) return;
        
        // Establish database connection
        con = getDatabaseConnection();
        
        // Construct ALTER TABLE statement
        StringBuilder sqlBuilder = new StringBuilder(
            "ALTER TABLE " + tableName + 
            " CHANGE COLUMN " + oldColumnName + " " + newColumnName + " " + dataType
        );
        
        // Add NULL/NOT NULL constraint
        sqlBuilder.append(chkN1.isSelected() ? " NULL" : " NOT NULL");
        
        // Prepare and execute statement
        pstmt = con.prepareStatement(sqlBuilder.toString());
        pstmt.execute();
        
        // Success message and refresh
        JOptionPane.showMessageDialog(
            this, 
            "Column updated successfully", 
            "Success", 
            JOptionPane.INFORMATION_MESSAGE
        );
        displayData();
        resetInputFields();
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(
            this, 
            "Database error: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } catch (Exception e) {
        JOptionPane.showMessageDialog(
            this, 
            "Unexpected error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } finally {
        // Close resources
        try {
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                this, 
                "Error closing database resources: " + ex.getMessage(), 
                "Resource Close Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    }//GEN-LAST:event_btnUpdateActionPerformed


    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
       // Validate row selection first
    int selectedRow = tblAllTables.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(
            this, 
            "Please select a column to drop", 
            "No Selection", 
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }

    Connection con = null;
    PreparedStatement pstmt = null;
    
    try {
        // Get table and column details from selected row
        String tableName = cboSearch.getSelectedItem().toString();
        String columnName = tblAllTables.getValueAt(selectedRow, 0).toString();
        
        // Check if column is allowed to be dropped
        if (isColumnNonEditable(tableName, columnName)) {
            JOptionPane.showMessageDialog(
                this, 
                "This column cannot be dropped!", 
                "Restricted Column", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        
        // Confirm before dropping the column
        int confirmDialog = JOptionPane.showConfirmDialog(
            this, 
            "Are you sure you want to drop column '" + columnName + "'?", 
            "Confirm Column Deletion", 
            JOptionPane.YES_NO_OPTION
        );
        
        if (confirmDialog != JOptionPane.YES_OPTION) {
            return; // Exit if user cancels
        }
        
        // Establish database connection
        con = getDatabaseConnection();
        
        // Check if column exists before attempting to drop
        if (!columnExists(con, tableName, columnName)) {
            JOptionPane.showMessageDialog(
                this, 
                "Column '" + columnName + "' does not exist in the table", 
                "Error", 
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        // Prepare SQL to drop column
        String sql = "ALTER TABLE " + tableName + " DROP COLUMN " + columnName;
        
        // Create and execute prepared statement
        pstmt = con.prepareStatement(sql);
        pstmt.execute();
        
        // Show success message
        JOptionPane.showMessageDialog(
            this, 
            "Column '" + columnName + "' dropped successfully", 
            "Success", 
            JOptionPane.INFORMATION_MESSAGE
        );
        
        // Refresh the table display
        displayData();
        
        // Clear input fields
        resetInputFields();
        
    } catch (SQLException e) {
        // Handle specific SQL exceptions
        JOptionPane.showMessageDialog(
            this, 
            "Error dropping column: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } catch (Exception e) {
        // Catch any other unexpected exceptions
        JOptionPane.showMessageDialog(
            this, 
            "Unexpected error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } finally {
        // Close resources
        try {
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                this, 
                "Error closing database resources: " + ex.getMessage(), 
                "Resource Close Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    }//GEN-LAST:event_btnDropActionPerformed

    private void chkP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkP1ActionPerformed
                                        

   private void displayData() {
    Connection con = null;
    ResultSet columns = null;
    ResultSet primaryKeys = null;
    ResultSet foreignKeys = null;
    
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/repairdb?useSSL=false", "root", "1111");
        
        String selectedTable = cboSearch.getSelectedItem().toString();
        
        // Get column metadata
        DatabaseMetaData metaData = con.getMetaData();
        columns = metaData.getColumns(null, null, selectedTable, null);
        
        // Create custom table model with non-editable cells
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make all cells non-editable
            }
        };
        
        // Add columns to the model
        model.addColumn("Column Name");
        model.addColumn("Data Type");
        model.addColumn("Nullable");
        model.addColumn("Primary Key");
        model.addColumn("Foreign Key");
        
        // Prepare primary keys ResultSet outside the loop
        primaryKeys = metaData.getPrimaryKeys(null, null, selectedTable);
        Set<String> primaryKeyColumns = new HashSet<>();
        while (primaryKeys.next()) {
            primaryKeyColumns.add(primaryKeys.getString("COLUMN_NAME"));
        }
        
        // Prepare foreign keys ResultSet outside the loop
        foreignKeys = metaData.getImportedKeys(null, null, selectedTable);
        Set<String> foreignKeyColumns = new HashSet<>();
        while (foreignKeys.next()) {
            foreignKeyColumns.add(foreignKeys.getString("FKCOLUMN_NAME"));
        }
        
        // Reset the columns ResultSet
        columns = metaData.getColumns(null, null, selectedTable, null);
        
        // Populate the model with column information
        while (columns.next()) {
            String columnName = columns.getString("COLUMN_NAME");
            String dataType = columns.getString("TYPE_NAME");
            
            // Add column size for VARCHAR
            int columnSize = columns.getInt("COLUMN_SIZE");
            if (dataType.equalsIgnoreCase("VARCHAR")) {
                dataType += "(" + columnSize + ")";
            }
            
            boolean isNullable = columns.getInt("NULLABLE") == DatabaseMetaData.columnNullable;
            
            boolean isPrimaryKey = primaryKeyColumns.contains(columnName);
            boolean isForeignKey = foreignKeyColumns.contains(columnName);
            
            model.addRow(new Object[]{
                columnName, 
                dataType, 
                isNullable ? "Yes" : "No", 
                isPrimaryKey ? "Yes" : "No", 
                isForeignKey ? "Yes" : "No"
            });
        }
        
        tblAllTables.setModel(model);
        
        // Optional: Adjust column widths
        adjustColumnWidths();
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(
            this, 
            "Error displaying data: " + e.getMessage(), 
            "Display Error", 
            JOptionPane.ERROR_MESSAGE
        );
    } finally {
        // Properly close all resources
        try {
            if (columns != null) columns.close();
            if (primaryKeys != null) primaryKeys.close();
            if (foreignKeys != null) foreignKeys.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                this, 
                "Error closing database resources: " + ex.getMessage(), 
                "Resource Close Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
}

// Optional method to adjust column widths
    private void adjustColumnWidths() {
    // Set preferred column widths
    TableColumnModel columnModel = tblAllTables.getColumnModel();
    columnModel.getColumn(0).setPreferredWidth(150); // Column Name
    columnModel.getColumn(1).setPreferredWidth(100); // Data Type
    columnModel.getColumn(2).setPreferredWidth(50);  // Nullable
    columnModel.getColumn(3).setPreferredWidth(50);  // Primary Key
    columnModel.getColumn(4).setPreferredWidth(50);  // Foreign Key
}

      
    private boolean columnExists(Connection con, String tableName, String columnName) throws SQLException {
    boolean exists = false;
    ResultSet rs = null;
    
    try {
        DatabaseMetaData metaData = con.getMetaData();
        rs = metaData.getColumns(null, null, tableName, columnName);
        
        exists = rs.next();
    } finally {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                // Log or handle exception
            }
        }
    }
    
    return exists;
}

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnADD;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cboSearch;
    private javax.swing.JComboBox cboType1;
    private javax.swing.JCheckBox chkF1;
    private javax.swing.JCheckBox chkN1;
    private javax.swing.JCheckBox chkP1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblC1;
    private javax.swing.JTable tblAllTables;
    private javax.swing.JTextField txtC1;
    // End of variables declaration//GEN-END:variables

}
