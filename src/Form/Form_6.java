/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import java.awt.Container;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class Form_6 extends javax.swing.JPanel {

    private static final List<String> PROTECTED_TABLES = Arrays.asList("admin", "mainadmin");    private Connection con;
    private JTextField[] textFields;
    private Object PROTECTED_TABLE;

    /**
     * Creates new form Form_6
     */
    public Form_6() {
        initComponents();
        btnBack.addActionListener(evt -> {
            try {
                Container parent = this.getParent();
                parent.remove(this);
                Form_Home mainPanel = new Form_Home();
                parent.add(mainPanel);
                parent.revalidate();
                parent.repaint();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, 
                    "Error returning to main panel: " + e.getMessage(), 
                    "Navigation Error", 
                    JOptionPane.ERROR_MESSAGE
                );
            }
        });

        // Rest of your existing constructor code...
        textFields = new JTextField[]{
            txtC1, txtC2, txtC3, txtC4, txtC5, 
            txtC6, txtC7, txtC8, txtC9, txtC10,
            txtC11, txtC12, txtC13, txtC14, txtC15
        };

        // Connect to database and populate table selection
        connectToDatabase();
        populateTableNames();
        
        // Add table selection listener
        cboSelect.addItemListener(evt -> {
            String selectedTable = (String) cboSelect.getSelectedItem();
            if (selectedTable != null && !selectedTable.equals("SELECT")) {
                displayTableData(selectedTable);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        txtC2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtC3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtC4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtC5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtC6 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtC7 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        txtC8 = new javax.swing.JTextField();
        cboSelect = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtC9 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        txtC10 = new javax.swing.JTextField();
        txtC1 = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtC11 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtC12 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtC13 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtC14 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtC15 = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));

        jLabel4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Column 2");

        txtC2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Column 3");

        txtC3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Column 4");

        txtC4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Column 5");

        txtC5.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Column 6");

        txtC6.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Column 7");

        txtC7.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Century", 0, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DATA TABLES MODIFICATION");

        jLabel10.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Column 8");

        btnBack.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnBack.setText("BACK");

        txtC8.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        cboSelect.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        cboSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT" }));

        jLabel11.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Column 9");

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select");

        txtC9.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Column 10");

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblData);

        txtC10.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        txtC1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        btnDelete.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Column 1");

        btnUpdate.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Column 11");

        txtC11.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Column 12");

        txtC12.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Column 13");

        txtC13.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Column 14");

        txtC14.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Column 15");

        txtC15.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(73, 73, 73)
                        .addComponent(txtC5, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(73, 73, 73)
                            .addComponent(txtC4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(73, 73, 73)
                                .addComponent(txtC3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(73, 73, 73)
                                    .addComponent(txtC2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(73, 73, 73)
                                    .addComponent(txtC1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(73, 73, 73)
                            .addComponent(txtC6, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(73, 73, 73)
                            .addComponent(txtC7, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addGap(73, 73, 73)
                            .addComponent(txtC8, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addGap(73, 73, 73)
                            .addComponent(txtC9, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(73, 73, 73)
                        .addComponent(txtC10, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(73, 73, 73)
                        .addComponent(txtC11, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(73, 73, 73)
                        .addComponent(txtC12, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(73, 73, 73)
                        .addComponent(txtC13, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(73, 73, 73)
                        .addComponent(txtC14, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtC15, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(76, 76, 76))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel2)
                        .addGap(37, 37, 37)
                        .addComponent(cboSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(442, 442, 442)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(87, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txtC6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(txtC7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(txtC8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(txtC9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txtC10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtC15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addGap(63, 63, 63)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addGap(47, 47, 47))
        );
    }// </editor-fold>//GEN-END:initComponents

     // Database Connection Method
    private void connectToDatabase() {
        try {
            String url = "jdbc:mysql://localhost:3306/repairdb?useSSL=false";
            String username = "root";
            String password = "1111";
            
            con = DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Database connection error: " + e.getMessage(), 
                "Connection Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }

    // Populate Table Names Method
    private void populateTableNames() {
        try {
            // Ensure connection is established
            if (con == null || con.isClosed()) {
                connectToDatabase();
            }
            
            // Clear existing items
            cboSelect.removeAllItems();
            cboSelect.addItem("SELECT");
            
            // Get table names from the database
            DatabaseMetaData metaData = con.getMetaData();
            ResultSet rs = metaData.getTables("repairdb", null, "%", new String[]{"TABLE"});
            
            while (rs.next()) {
                String tableName = rs.getString("TABLE_NAME");
                cboSelect.addItem(tableName);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error retrieving table names: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }

    // Display Table Data Method
    private void displayTableData(String tableName) {
       try {
            // Clear existing table data
            DefaultTableModel model = (DefaultTableModel) tblData.getModel();
            model.setRowCount(0);
            model.setColumnCount(0);
            
            // Get table metadata and column names
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM " + tableName + " LIMIT 0");
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();
            
            // Add column names
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(metaData.getColumnName(i));
            }
            
            // Fetch and add data
            rs = stmt.executeQuery("SELECT * FROM " + tableName);
            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                for (int i = 1; i <= columnCount; i++) {
                    row.add(rs.getObject(i));
                }
                model.addRow(row);
            }
            
            // Update text field labels and visibility
            updateTextFieldLabels(metaData);
            
            // Setup table click listener
           tblDataMouseClicked();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error displaying table data: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }

    // Update Text Field Labels Method
    private void updateTextFieldLabels(ResultSetMetaData metaData) throws SQLException {
        int columnCount = metaData.getColumnCount();
        
        // Reset labels and visibility
        JLabel[] labels = {
            jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, 
            jLabel8, jLabel9, jLabel10, jLabel11, jLabel12,
            jLabel13, jLabel14, jLabel15, jLabel16, jLabel17
        };
        
        // Hide all labels and text fields initially
        for (int i = 0; i < labels.length; i++) {
            textFields[i].setVisible(false);
            labels[i].setVisible(false);
        }
        
        // Show only existing columns
        for (int i = 0; i < Math.min(columnCount, labels.length); i++) {
            String columnName = metaData.getColumnName(i + 1);
            labels[i].setText(columnName);
            textFields[i].setVisible(true);
            labels[i].setVisible(true);
            textFields[i].setText(""); // Clear text fields
        }
    }
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         String selectedTable = (String) cboSelect.getSelectedItem();
         
        if (PROTECTED_TABLE.equals(selectedTable)) {
        JOptionPane.showMessageDialog(this, 
            "Modifications to the " + PROTECTED_TABLE + " table is not allowed", 
            "Access Denied", 
            JOptionPane.WARNING_MESSAGE
        );
        return; // Exit the method
    }
         
        if (selectedTable == null || selectedTable.equals("SELECT")) {
            JOptionPane.showMessageDialog(this, 
                "Please select a table first", 
                "Table Selection", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        try {
            // Get primary key value from the first text field
            int primaryKeyValue = Integer.parseInt(txtC1.getText().trim());

            // Prepare delete statement
            String deleteQuery = "DELETE FROM " + selectedTable + " WHERE " + tblData.getColumnName(0) + " = ?";
            PreparedStatement pstmt = con.prepareStatement(deleteQuery);
            pstmt.setInt(1, primaryKeyValue);

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Record deleted successfully", 
                    "Delete Success", 
                    JOptionPane.INFORMATION_MESSAGE
                );
                
                // Refresh table data
                displayTableData(selectedTable);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No record deleted", 
                    "Delete Error", 
                    JOptionPane.WARNING_MESSAGE
                );
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error deleting record: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE
            );
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Invalid primary key value", 
                "Input Error", 
                JOptionPane.WARNING_MESSAGE
            );
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String selectedTable = (String) cboSelect.getSelectedItem();
        if (selectedTable == null || selectedTable.equals("SELECT")) {
            JOptionPane.showMessageDialog(this, 
                "Please select a table first", 
                "Table Selection", 
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }

        try {
            // Prepare update statement dynamically
            StringBuilder updateQuery = new StringBuilder("UPDATE " + selectedTable + " SET ");
            Vector<Object> values = new Vector<>();
            String primaryKeyColumn = tblData.getColumnName(0);
            int primaryKeyValue = -1;

            // Collect column values
            for (int i = 0; i < textFields.length; i++) {
                JTextField currentTextField = textFields[i];
                
                if (currentTextField.isVisible() && !currentTextField.getText().trim().isEmpty()) {
                    // Skip primary key column in SET clause
                    if (i == 0) {
                        primaryKeyValue = Integer.parseInt(currentTextField.getText().trim());
                        continue;
                    }
                    
                    // Add column to update
                    if (values.size() > 0) {
                        updateQuery.append(", ");
                    }
                    updateQuery.append(tblData.getColumnName(i)).append(" = ?");
                    values.add(currentTextField.getText().trim());
                }
            }

            // Add WHERE clause with primary key
            updateQuery.append(" WHERE ").append(primaryKeyColumn).append(" = ?");
            values.add(primaryKeyValue);

            // Prepare and execute update statement
            PreparedStatement pstmt = con.prepareStatement(updateQuery.toString());
            
            // Set parameter values
            for (int i = 0; i < values.size(); i++) {
                pstmt.setObject(i + 1, values.get(i));
            }

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Record updated successfully", 
                    "Update Success", 
                    JOptionPane.INFORMATION_MESSAGE
                );
                
                // Refresh table data
                displayTableData(selectedTable);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No record updated", 
                    "Update Error", 
                    JOptionPane.WARNING_MESSAGE
                );
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error updating record: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        // TODO add your handling code here
        int row = tblData.rowAtPoint(evt.getPoint());
                int col = tblData.columnAtPoint(evt.getPoint());
                
                if (row >= 0 && row < tblData.getRowCount()) {
                    // Populate text fields with selected row's data
                    for (int i = 0; i < Math.min(textFields.length, tblData.getColumnCount()); i++) {
                        Object cellValue = tblData.getValueAt(row, i);
                        textFields[i].setText(cellValue != null ? cellValue.toString() : "");
                    }
                }
    }//GEN-LAST:event_tblDataMouseClicked

public void closeConnection() {
        try {
            if (con != null && !con.isClosed()) {
                con.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Back Button Action
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {                                        
       
    }                                       

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cboSelect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtC1;
    private javax.swing.JTextField txtC10;
    private javax.swing.JTextField txtC11;
    private javax.swing.JTextField txtC12;
    private javax.swing.JTextField txtC13;
    private javax.swing.JTextField txtC14;
    private javax.swing.JTextField txtC15;
    private javax.swing.JTextField txtC2;
    private javax.swing.JTextField txtC3;
    private javax.swing.JTextField txtC4;
    private javax.swing.JTextField txtC5;
    private javax.swing.JTextField txtC6;
    private javax.swing.JTextField txtC7;
    private javax.swing.JTextField txtC8;
    private javax.swing.JTextField txtC9;
    // End of variables declaration//GEN-END:variables

    private void tblDataMouseClicked() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
