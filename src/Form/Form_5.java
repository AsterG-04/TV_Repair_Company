/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import java.awt.Container;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class Form_5 extends javax.swing.JPanel {

    private Connection con;
    private String[] columnNames;
    private JTextField[] textFields;
    private static final List<String> PROTECTED_TABLES = Arrays.asList("admin", "mainadmin");    
    private Object PROTECTED_TABLE;
    /**
     * Creates new form Form_5
     */
    public Form_5() {
        initComponents();
        
        textFields = new JTextField[]{
        jTextField1, jTextField2, jTextField3, jTextField4, jTextField5,
        jTextField6, jTextField7, jTextField8, jTextField9, jTextField10
    };
        populateTableNames();
        connectToDatabase();
    }

    private void connectToDatabase() {
        try {
            // Establish connection to repairdb database
            String url = "jdbc:mysql://localhost:3306/repairdb?useSSL=false";
            String username = "root"; 
            String password = "1111"; 
            
            con = DriverManager.getConnection(url, username, password);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Database connection error: " + e.getMessage(), 
                "Connection Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    private void populateTableNames() {
    try {
        // Ensure connection is established
        if (con == null || con.isClosed()) {
            connectToDatabase();
        }
        
        // Clear existing items
        cboSearch.removeAllItems();
        cboSearch.addItem("SELECT TABLE");
        
        // Get table names from the repairdb database
        DatabaseMetaData metaData = con.getMetaData();
        ResultSet rs = metaData.getTables("repairdb", null, "%", new String[]{"TABLE"});
        
        while (rs.next()) {
            String tableName = rs.getString("TABLE_NAME");
            cboSearch.addItem(tableName);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Error retrieving table names: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE
        );
    }
}
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        cboSearch = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUpdate = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setFont(new java.awt.Font("Century", 0, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("COLUMN DATA ADDITION");

        btnBack.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cboSearch.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        cboSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT" }));
        cboSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSearchItemStateChanged(evt);
            }
        });
        cboSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSearchActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SELECTE TABLE");

        tblUpdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblUpdate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblUpdate);

        jTextField1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Column 1");

        jLabel4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Column 2");

        jTextField2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Column 3");

        jTextField3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Column 4");

        jTextField4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Column 5");

        jTextField5.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Column 6");

        jTextField6.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Column 7");

        jTextField7.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Column 8");

        jTextField8.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Column 9");

        jTextField9.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Column 10");

        jTextField10.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N

        btnAdd.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel2)
                        .addGap(37, 37, 37)
                        .addComponent(cboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(73, 73, 73)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12)
                                .addGap(73, 73, 73)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(73, 73, 73)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(73, 73, 73)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(73, 73, 73)
                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(73, 73, 73)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(148, 148, 148)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(73, 73, 73)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(73, 73, 73)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(73, 73, 73)
                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(73, 73, 73)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btnBack)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd)
                        .addGap(38, 38, 38))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void displayTableData(String tableName) {
        try {
            // Clear existing table data
            DefaultTableModel model = (DefaultTableModel) tblUpdate.getModel();
            model.setRowCount(0);
            model.setColumnCount(0);
            
            // Get table metadata and column names
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM " + tableName + " LIMIT 0");
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();
            
            // Add column names
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(metaData.getColumnName(i));
            }
            
            // Fetch and add data
            rs = stmt.executeQuery("SELECT * FROM " + tableName);
            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                for (int i = 1; i <= columnCount; i++) {
                    row.add(rs.getObject(i));
                }
                model.addRow(row);
            }
            
            // Update text field labels with column names
            updateColumnLabels(metaData);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Error displaying table data: " + e.getMessage(), 
                "Database Error", 
                JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
   private void updateColumnLabels(ResultSetMetaData metaData) throws SQLException {
    int columnCount = metaData.getColumnCount();
    
    // Reset all labels and text fields initially
    for (int i = 0; i < 10; i++) {
        switch (i) {
            case 0: jLabel3.setText("Column 1"); jTextField1.setVisible(false); jLabel3.setVisible(false); break;
            case 1: jLabel4.setText("Column 2"); jTextField2.setVisible(false); jLabel4.setVisible(false); break;
            case 2: jLabel5.setText("Column 3"); jTextField3.setVisible(false); jLabel5.setVisible(false); break;
            case 3: jLabel6.setText("Column 4"); jTextField4.setVisible(false); jLabel6.setVisible(false); break;
            case 4: jLabel7.setText("Column 5"); jTextField5.setVisible(false); jLabel7.setVisible(false); break;
            case 5: jLabel8.setText("Column 6"); jTextField6.setVisible(false); jLabel8.setVisible(false); break;
            case 6: jLabel9.setText("Column 7"); jTextField7.setVisible(false); jLabel9.setVisible(false); break;
            case 7: jLabel10.setText("Column 8"); jTextField8.setVisible(false); jLabel10.setVisible(false); break;
            case 8: jLabel11.setText("Column 9"); jTextField9.setVisible(false); jLabel11.setVisible(false); break;
            case 9: jLabel12.setText("Column 10"); jTextField10.setVisible(false); jLabel12.setVisible(false); break;
        }
    }
    
    // Show and label only the columns that exist in the table
    for (int i = 0; i < Math.min(columnCount, 10); i++) {
        String columnName = metaData.getColumnName(i + 1);
        
        switch (i) {
            case 0: 
                jLabel3.setText(columnName); 
                jTextField1.setVisible(true); 
                jLabel3.setVisible(true); 
                jTextField1.setText(""); 
                break;
            case 1: 
                jLabel4.setText(columnName); 
                jTextField2.setVisible(true); 
                jLabel4.setVisible(true); 
                jTextField2.setText(""); 
                break;
            case 2: 
                jLabel5.setText(columnName); 
                jTextField3.setVisible(true); 
                jLabel5.setVisible(true); 
                jTextField3.setText(""); 
                break;
            case 3: 
                jLabel6.setText(columnName); 
                jTextField4.setVisible(true); 
                jLabel6.setVisible(true); 
                jTextField4.setText(""); 
                break;
            case 4: 
                jLabel7.setText(columnName); 
                jTextField5.setVisible(true); 
                jLabel7.setVisible(true); 
                jTextField5.setText(""); 
                break;
            case 5: 
                jLabel8.setText(columnName); 
                jTextField6.setVisible(true); 
                jLabel8.setVisible(true); 
                jTextField6.setText(""); 
                break;
            case 6: 
                jLabel9.setText(columnName); 
                jTextField7.setVisible(true); 
                jLabel9.setVisible(true); 
                jTextField7.setText(""); 
                break;
            case 7: 
                jLabel10.setText(columnName); 
                jTextField8.setVisible(true); 
                jLabel10.setVisible(true); 
                jTextField8.setText(""); 
                break;
            case 8: 
                jLabel11.setText(columnName); 
                jTextField9.setVisible(true); 
                jLabel11.setVisible(true); 
                jTextField9.setText(""); 
                break;
            case 9: 
                jLabel12.setText(columnName); 
                jTextField10.setVisible(true); 
                jLabel12.setVisible(true); 
                jTextField10.setText(""); 
                break;
        }
    }
}
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
      String selectedTable = (String) cboSearch.getSelectedItem();
    
    // Check if the selected table is in the protected tables list
    if (PROTECTED_TABLES.contains(selectedTable)) {
        JOptionPane.showMessageDialog(this, 
            "Modifications to the " + selectedTable + " table are not allowed", 
            "Access Denied", 
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }
    
    if (selectedTable == null || selectedTable.equals("SELECT TABLE")) {
        JOptionPane.showMessageDialog(this, 
            "Please select a table first", 
            "Table Selection", 
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }
    
    try {
        // Get column names from the table model
        int columnCount = tblUpdate.getColumnCount();
        
        // Identify the primary key column (assuming it's the first column)
        String primaryKeyColumn = tblUpdate.getColumnName(0);
        String primaryKeyValue = textFields[0].getText().trim();
        
        // Check for duplicate ID
        if (!primaryKeyValue.isEmpty()) {
            String duplicateCheckQuery = "SELECT COUNT(*) FROM " + selectedTable + 
                                         " WHERE " + primaryKeyColumn + " = ?";
            PreparedStatement checkStmt = con.prepareStatement(duplicateCheckQuery);
            checkStmt.setString(1, primaryKeyValue);
            
            ResultSet rs = checkStmt.executeQuery();
            if (rs.next() && rs.getInt(1) > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Error: " + primaryKeyColumn + " already exists", 
                    "Duplicate ID Entry", 
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
        }
        
        // Prepare insert statement dynamically based on selected table
        StringBuilder insertQuery = new StringBuilder("INSERT INTO " + selectedTable + " (");
        StringBuilder valuesClause = new StringBuilder(") VALUES (");
        
        // Collect non-empty values
        Vector<Object> values = new Vector<>();
        for (int i = 0; i < columnCount; i++) {
            JTextField currentTextField = textFields[i];
            if (currentTextField.isVisible() && !currentTextField.getText().trim().isEmpty()) {
                if (values.size() > 0) {
                    insertQuery.append(", ");
                    valuesClause.append(", ");
                }
                insertQuery.append(tblUpdate.getColumnName(i));
                valuesClause.append("?");
                values.add(currentTextField.getText().trim());
            }
        }
        
        insertQuery.append(valuesClause).append(")");
        
        // Prepare and execute prepared statement
        PreparedStatement pstmt = con.prepareStatement(insertQuery.toString());
        for (int i = 0; i < values.size(); i++) {
            pstmt.setObject(i + 1, values.get(i));
        }
        
        int rowsAffected = pstmt.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, 
                "Data added successfully", 
                "Success", 
                JOptionPane.INFORMATION_MESSAGE
            );
            
            // Refresh table data
            displayTableData(selectedTable);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Error adding data: " + e.getMessage(), 
            "Database Error", 
            JOptionPane.ERROR_MESSAGE
        );
    }
    }//GEN-LAST:event_btnAddActionPerformed

    public void closeConnection() {
        try {
            if (con != null && !con.isClosed()) {
                con.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
         try {
        // Get parent container
        Container parent = this.getParent();
        
        // Remove current panel
        parent.remove(this);
        
        // Add back the main panel (Form_Home)
        Form_Home mainPanel = new Form_Home();
        parent.add(mainPanel);
        
        // Refresh the container
        parent.revalidate();
        parent.repaint();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, 
            "Error returning to main panel: " + e.getMessage(), 
            "Navigation Error", 
            JOptionPane.ERROR_MESSAGE
        );
    }
    }//GEN-LAST:event_btnBackActionPerformed

    private void cboSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSearchActionPerformed
        
    }//GEN-LAST:event_cboSearchActionPerformed

    private void cboSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSearchItemStateChanged
        // TODO add your handling code here:
         String selectedTable = (String) cboSearch.getSelectedItem();
        if (selectedTable != null && !selectedTable.equals("SELECT TABLE")) {
            displayTableData(selectedTable);
        }
    }//GEN-LAST:event_cboSearchItemStateChanged


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox cboSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTable tblUpdate;
    // End of variables declaration//GEN-END:variables
}
