/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import java.awt.Container;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author ACER
 */
public class Form_9 extends javax.swing.JPanel {

    ResultSet rs = null;
    Connection con = null;
    PreparedStatement pstmt = null;
    Statement stmt = null;
    /**
     * Creates new form Form_9
     */
    public Form_9() {
        initComponents();
        fillTableName();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        cboSearch = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAllTables = new javax.swing.JTable();
        btnDrop = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Search");

        cboSearch.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        cboSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECT" }));
        cboSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSearchItemStateChanged(evt);
            }
        });

        tblAllTables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblAllTables);

        btnDrop.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnDrop.setText("DROP");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 20)); // NOI18N
        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Century", 0, 28)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("DATABASE TABLES DELETION");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDrop)
                .addGap(139, 139, 139))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(cboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(459, 459, 459)
                        .addComponent(jLabel3)))
                .addContainerGap(130, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145)
                .addComponent(btnDrop)
                .addGap(6, 6, 6)
                .addComponent(btnBack)
                .addGap(59, 59, 59))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fillTableName()
    {
        try
        {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/repairdb?useSSL=false", "root", "1111");
            if (con != null) {
            Statement stmt = con.createStatement();
            DatabaseMetaData dbmd = con.getMetaData();
            String[] types = {"TABLE"};//<-- S
            rs = dbmd.getTables("RepairDB",null,"%", types); //adding table info in result set
            while(rs.next())
            {
                cboSearch.addItem(rs.getString("TABLE_NAME"));//adding resultset's table name in combobox
            }
            }
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    private void displayData() {
    Connection con = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    ResultSet rsColumns = null; // Separate ResultSet for column metadata

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/repairdb?useSSL=false", "root", "1111");
        
        String selectedTable = cboSearch.getSelectedItem().toString();

        // Get column information from the selected table
        DatabaseMetaData dbmd = con.getMetaData();
        rsColumns = dbmd.getColumns(null, null, selectedTable, null);

        // Create a DefaultTableModel with column names
        DefaultTableModel model = new DefaultTableModel();
        while (rsColumns.next()) {
            String columnName = rsColumns.getString("COLUMN_NAME");
            model.addColumn(columnName);
        }

        // Execute a query to get the data from the selected table
        String sql = "SELECT * FROM " + selectedTable;
        pstmt = con.prepareStatement(sql);
        rs = pstmt.executeQuery();

        // Populate the model with data
        while (rs.next()) {
            int columnCount = model.getColumnCount(); // Get column count from the model
            Object[] rowData = new Object[columnCount];
            for (int i = 0; i < columnCount; i++) {
                rowData[i] = rs.getObject(i + 1); // Accessing ResultSet with 1-based index
            }
            model.addRow(rowData);
        }

        // Set the model to the JTable
        tblAllTables.setModel(model);
        tblAllTables.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
            if (rsColumns != null) rsColumns.close(); // Close the column ResultSet
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }
}
    
    private void cboSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSearchItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/repairdb?useSSL=false", "root", "1111");
                Statement stmt = con.createStatement(); // Initialize the statement here

                String selectedTable = cboSearch.getSelectedItem().toString();
                String sql = "SELECT * FROM " + selectedTable;
                rs = stmt.executeQuery(sql);

                // Use DbUtils to set the model
                tblAllTables.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            } finally {
                try {
                    if (rs != null) rs.close();
                    if (stmt != null) stmt.close(); // Close the statement
                    if (con != null) con.close(); // Close the connection
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
        }
    }//GEN-LAST:event_cboSearchItemStateChanged

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/repairdb?useSSL=false", "root", "1111");
        
        String selectedTable = cboSearch.getSelectedItem().toString();
        
        // List of tables that cannot be deleted
        String[] protectedTables = {"Customer", "admin", "mainadmin", "tv_products_and_services"};
        
        // Check if the selected table is in the protected list
        boolean isProtected = false;
        for (String table : protectedTables) {
            if (table.equalsIgnoreCase(selectedTable)) {
                isProtected = true;
                break;
            }
        }
        
        if (isProtected) {
            JOptionPane.showMessageDialog(this, "You cannot delete the table: " + selectedTable);
            return; // Exit the method if the table is protected
        }
        
        String sql = "DROP TABLE " + selectedTable;
        
        int response = JOptionPane.showConfirmDialog(null, "Do you want to proceed with the deletion?", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            PreparedStatement pstmt = con.prepareStatement(sql);
            pstmt.execute();
            JOptionPane.showMessageDialog(this, "Table deleted successfully");
            displayData();
            // Clear Selected Item 
            int index = cboSearch.getSelectedIndex();
            cboSearch.removeItemAt(index);
        } else if (response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION) {
            JOptionPane.showMessageDialog(null, "Deletion is not complete successfully!!", "Confirm", JOptionPane.INFORMATION_MESSAGE);
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
    }//GEN-LAST:event_btnDropActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        try {
            // Get the parent container (JFrame or JPanel)
            Container parent = this.getParent();

            // Remove the current panel
            parent.remove(this);

            // Add back the main panel (assuming it's Form_Home)
            Form_Home mainPanel = new Form_Home();
            parent.add(mainPanel);

            // Refresh the container
            parent.revalidate();
            parent.repaint();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error returning to main panel: " + e.getMessage(),
                "Navigation Error",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JComboBox cboSearch;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblAllTables;
    // End of variables declaration//GEN-END:variables
}
